{
    "version": "https://jsonfeed.org/version/1",
    "title": "Emil Olofsson - Portfolio",
    "description": "",
    "home_page_url": "https://broremilolofsson.github.io",
    "feed_url": "https://broremilolofsson.github.io/feed.json",
    "user_comment": "",
    "icon": "https://broremilolofsson.github.io/media/website/WebsiteLogo.jpg",
    "author": {
        "name": "Emil Olofsson"
    },
    "items": [
        {
            "id": "https://broremilolofsson.github.io/about-me.html",
            "url": "https://broremilolofsson.github.io/about-me.html",
            "title": "About Me",
            "summary": "Hi there! I'm currently on the lookout for an internship as a&hellip;",
            "content_html": "<p>Hi there! I'm currently on the lookout for an internship as a tools and engine programmer. My expertise lies in C++, and I'm passionate about building systems that bridge various disciplines together. </p>\n<p>I am currently studying at The Game Assembly in Stockholm. During this time, I have contributed to the development of 8 games, utilizing various engines, including one developed by our own group.</p>\n<figure class=\"post__image align-left\"><span style=\"color: #ffffff;\"><img loading=\"lazy\"  src=\"https://broremilolofsson.github.io/media/posts/9/sp22emilolofsson-340x425.png\" alt=\"\" width=\"141\" height=\"176\" sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/9/responsive/sp22emilolofsson-340x425-xs.png 320w ,https://broremilolofsson.github.io/media/posts/9/responsive/sp22emilolofsson-340x425-sm.png 480w ,https://broremilolofsson.github.io/media/posts/9/responsive/sp22emilolofsson-340x425-md.png 768w ,https://broremilolofsson.github.io/media/posts/9/responsive/sp22emilolofsson-340x425-xl.png 1024w\"></figure></span></p>\n<h4>Contacts:</h4>\n<p class=\"msg msg--highlight   msg--info\"><a href=\"mailto:bror.emil.olofsson@gmail.com\">bror.emil.olofsson@gmail.com</a><br><a href=\"https://www.linkedin.com/in/emil-olofsson-0981162ba/\">LinkedIn</a></p>\n<h4><strong>Disclaimer</strong></h4>\n<p class=\"msg msg--warning\">I am part of The Game Assembly's internship program. ​<br>As per the agreement between the Games Industry and The Game Assembly, neither student nor company may be in contact with one another regarding internships before April 23rd. <br><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Any internship offers can be made on May 6th, at the earliest.</span></p>",
            "author": {
                "name": "Emil Olofsson"
            },
            "tags": [
            ],
            "date_published": "2024-04-08T15:18:05+02:00",
            "date_modified": "2024-04-09T14:00:44+02:00"
        },
        {
            "id": "https://broremilolofsson.github.io/other-projects.html",
            "url": "https://broremilolofsson.github.io/other-projects.html",
            "title": "Other Projects",
            "summary": "Magical Girl: Delivery Service Project Description: Engine: TGE (school engine) / Unity&hellip;",
            "content_html": "\n    <h3 id=\"magical-girl-delivery-service\">\n      Magical Girl: Delivery Service\n    </h3>\n\n  <p>\n    <strong>Project Description:</strong>\n  </p>\n\n  <p>\n    Engine: TGE (school engine) / Unity (editor)<br>Duration: 12 weeks<br>Genre: Platformer<br>\n  </p>\n\n  <p>\n    <strong>Contributions</strong>:\n  </p>\n\n  <ul>\n    <li>Export/Import</li><li>Animation State Handler</li><li>Enemy Drones</li><li>Scripted Events</li><li>Cutscenes</li>\n  </ul>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/8/MagicalGirl2.gif\" height=\"270\" width=\"480\" alt=\"\" >\n      \n    </figure>\n\n    <h3 id=\"slothomancer\">\n      Slothomancer\n    </h3>\n\n  <p>\n    <strong>Project Description:</strong>\n  </p>\n\n  <p>\n    Engine: Unity<br>Duration: 8 weeks<br>Genre: Puzzle<br>\n  </p>\n\n  <p>\n    <strong>Contributions:</strong>\n  </p>\n\n  <ul>\n    <li>Trap/Trigger system</li><li>Tools</li>\n  </ul>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/8/Slothomancer.gif\" height=\"270\" width=\"480\" alt=\"\" >\n      \n    </figure>\n\n    <h3 id=\"squid-heist\">\n      Squid Heist\n    </h3>\n\n  <p>\n    <strong>Project Description:</strong>\n  </p>\n\n  <p>\n    Engine: Unity<br>Duration: 8 weeks<br>Genre: Obstacle Game<br>\n  </p>\n\n  <p>\n    <strong>Contributions:</strong>\n  </p>\n\n  <ul>\n    <li>Camera</li><li>Progress Bar</li>\n  </ul>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/8/SquistHeist.gif\" height=\"270\" width=\"480\" alt=\"\" >\n      \n    </figure>",
            "image": "https://broremilolofsson.github.io/media/posts/8/MagicalGirl.gif",
            "author": {
                "name": "Emil Olofsson"
            },
            "tags": [
            ],
            "date_published": "2024-04-03T13:43:03+02:00",
            "date_modified": "2024-04-08T13:45:34+02:00"
        },
        {
            "id": "https://broremilolofsson.github.io/the-negotiators.html",
            "url": "https://broremilolofsson.github.io/the-negotiators.html",
            "title": "Project: The Negotiators",
            "summary": "Project Description Engine: Fraktal Oktav (in-house) and Unity (editor) Duration: 15 weeks&hellip;",
            "content_html": "\n    <h2 id=\"project-description\" class=\"align-center\">\n      Project Description\n    </h2>\n\n  <p>\n    Engine: Fraktal Oktav (in-house) and Unity (editor)<br>Duration: 15 weeks<br>Genre: FPS<br>\n  </p>\n\n    <h2 id=\"contributions\" class=\"align-center\">\n      Contributions\n    </h2>\n\n  <ul>\n    <li>Editor</li><li>Node Scripting</li><li>Scene Management</li>\n  </ul>\n\n    <h3 id=\"editor\">\n      Editor\n    </h3>\n\n  <p>\n    In this project I focused mainly on enhancing our engine's editor. This included:\n  </p>\n\n  <ul>\n    <li>Scene view with free camera</li><li>Manipulating transforms from editor (ImGuizmo)</li><li>Debugging console</li><li>Scene handling</li><li>Data management<br></li><li>GameObject hierarchy<br></li><li>GameObject inspector</li>\n  </ul>\n\n  <p>\n    The editor was created using ImGui.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/7/Skaermbild-2024-04-03-092316.png\" height=\"1079\" width=\"1919\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/7/responsive/Skaermbild-2024-04-03-092316-xs.png 320w ,https://broremilolofsson.github.io/media/posts/7/responsive/Skaermbild-2024-04-03-092316-sm.png 480w ,https://broremilolofsson.github.io/media/posts/7/responsive/Skaermbild-2024-04-03-092316-md.png 768w ,https://broremilolofsson.github.io/media/posts/7/responsive/Skaermbild-2024-04-03-092316-xl.png 1024w\">\n      \n    </figure>\n\n    <h3 id=\"node-scripting\">\n      Node Scripting\n    </h3>\n\n  <p>\n    I created my own node scripting system from scratch, for more info see: <a href=\"https://broremilolofsson.github.io/visual-scripting.html\">Node Scripting</a>\n  </p>\n\n  <p>\n    It was utilized for scene transitions, enemy spawning and conditional progression.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/7/EnemyRoomDoorOpen.gif\" height=\"977\" width=\"1888\" alt=\"\" >\n      <figcaption>When killing the last enemy in the arena the door opens, allowing the player to progress</figcaption>\n    </figure>\n\n    <h3 id=\"scene-management\">\n      Scene Management\n    </h3>\n\n  <p>\n    As we still used Unity as our editor, we had to be reliant on the Unity-IDs that they generate. This created problems as we couldn't use these IDs to save data about our engine created objects and to link any objects to other parts of the engine (such as node scripting).\n  </p>\n\n  <p>\n    The solution was to allow for the scenes handling to be handled completely from our engine. This included serialization and deserialization of scenes using Json.\n  </p>",
            "image": "https://broremilolofsson.github.io/media/posts/7/TheNegotiators.png",
            "author": {
                "name": "Emil Olofsson"
            },
            "tags": [
            ],
            "date_published": "2024-03-13T13:59:18+01:00",
            "date_modified": "2024-04-08T13:33:37+02:00"
        },
        {
            "id": "https://broremilolofsson.github.io/spite-new-sun.html",
            "url": "https://broremilolofsson.github.io/spite-new-sun.html",
            "title": "Project: Spite: New Sun",
            "summary": "Project Description Engine: Fraktal Oktav (in-house) and Unity (editor) Duration: 12 weeks&hellip;",
            "content_html": "\n    <h2 id=\"project-description\" class=\"align-center\">\n      Project Description\n    </h2>\n\n  <p>\n    Engine: Fraktal Oktav (in-house) and Unity (editor)<br>Duration: 12 weeks<br>Genre: Hack and slash (Diablo-like)<br>\n  </p>\n\n    <h2 id=\"contributions\" class=\"align-center\">\n      Contributions\n    </h2>\n\n  <ul>\n    <li>Navmesh (A* and Funneling)</li><li>Enemies (Behavior Tree)</li><li>Collision System</li><li>Trigger System</li>\n  </ul>\n\n    <h3 id=\"navmesh\">\n      Navmesh\n    </h3>\n\n  <p>\n    I implemented navigation on a navmesh that we used in this project. This included implementing the<a href=\"https://en.wikipedia.org/wiki/A*_search_algorithm\" target=\"_blank\"> A*-algorithm</a> and the <a href=\"https://digestingduck.blogspot.com/2010/03/simple-stupid-funnel-algorithm.html\" target=\"_blank\">funneling-algorithm</a> in order to find the shortest path for an agent to take.\n  </p>\n\n  <p>\n    The implementation included raycasting on the navmesh to find where the user clicked and finding the closest point inside the navmesh when clicking outside.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/6/NavmeshP6.gif\" height=\"977\" width=\"1888\" alt=\"\" >\n      <figcaption>The closest point inside the navmesh is calculated when clicking outside</figcaption>\n    </figure>\n\n    <h3 id=\"enemies\">\n      Enemies\n    </h3>\n\n  <p>\n    I created the behaviors for both enemy types (grunt and mage). This included creating a <a href=\"https://en.wikipedia.org/wiki/Behavior_tree_(artificial_intelligence,_robotics_and_control)#:~:text=A%20behavior%20tree%20is%20a,tasks%20in%20a%20modular%20fashion.\" target=\"_blank\">behavior tree</a> from scratch and implementing the different leaf nodes that were going to perform some action.\n  </p>\n\n  <p>\n    To make the movement more smooth I also implemented steering behaviors and a movement controller that the enemies used. This allowed the enemies not to walk into each other (using separation) and feel more realistic.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/6/KillEnemiesP6.gif\" height=\"977\" width=\"1888\" alt=\"\" >\n      \n    </figure>\n\n    <h3 id=\"collision-system\">\n      Collision System\n    </h3>\n\n  <p>\n    I created a collision system from scratch, supporting different shape types including: AABB, Sphere, OBB, Point, Ray collisions.\n  </p>\n\n  <p>\n    The system supports layer filtering which was used to filter different collisions, allowing us to not let the player abilities collide with the player for example.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/6/CollisionEnemyKillP7-2.gif\" height=\"977\" width=\"1888\" alt=\"\" >\n      \n    </figure>\n\n    <h3 id=\"trigger-system\">\n      Trigger System\n    </h3>\n\n  <p>\n    I updated and refined my system from the <a href=\"https://broremilolofsson.github.io/projects.html\">Stella's Quest</a>&nbsp;project. This included the introduction of a new concept I called \"Condition\". The new \"Event\" class has a \"Condition\" and a corresponding \"Action\", allowing for very modular behaviors. The events are consequently polled every frame to check if the condition has been met, and if so, the action is executed.\n  </p>\n\n  <p>\n    In Unity, I upgraded the interface to be able to enhance the user experience.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/6/Skaermbild-2024-04-03-093659.png\" height=\"317\" width=\"714\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/6/responsive/Skaermbild-2024-04-03-093659-xs.png 320w ,https://broremilolofsson.github.io/media/posts/6/responsive/Skaermbild-2024-04-03-093659-sm.png 480w ,https://broremilolofsson.github.io/media/posts/6/responsive/Skaermbild-2024-04-03-093659-md.png 768w ,https://broremilolofsson.github.io/media/posts/6/responsive/Skaermbild-2024-04-03-093659-xl.png 1024w\">\n      \n    </figure>",
            "image": "https://broremilolofsson.github.io/media/posts/6/SpiteNewSun-2.png",
            "author": {
                "name": "Emil Olofsson"
            },
            "tags": [
            ],
            "date_published": "2024-03-13T13:16:56+01:00",
            "date_modified": "2024-04-08T13:45:52+02:00"
        },
        {
            "id": "https://broremilolofsson.github.io/projects.html",
            "url": "https://broremilolofsson.github.io/projects.html",
            "title": "Project: Stella&#x27;s Quest",
            "summary": "Project Description Engine: TGE (school engine) / Unity (editor) Duration: 8 weeks&hellip;",
            "content_html": "\n    <h2 id=\"project-description\" class=\"align-center\">\n      Project Description\n    </h2>\n\n  <p>\n    Engine: TGE (school engine) / Unity (editor)<br>Duration: 8 weeks<br>Genre: Adventure<br>\n  </p>\n\n    <h2 id=\"contributions\" class=\"align-center\">\n      Contributions\n    </h2>\n\n  <ul>\n    <li>Scripted event system</li><li>Unity tools for Level designers</li><li>Export/Import pipeline of scripted events</li><li>Camera controller<br></li><li>Collectables</li>\n  </ul>\n\n    <h3 id=\"scripted-event-system\">\n      Scripted Event System\n    </h3>\n\n  <p>\n    I started implementing a system that could handle different scripted events. For example, when the player walks on a specific tile:<br> -&gt; The player is forced to walk to a specific tile<br> -&gt; Enemies spawn and doors close<br> -&gt; Once all the enemies have been killed<br> -&gt; The doors opens<br>\n  </p>\n\n  <p>\n    I realized that this logic could be abstracted to having different \"<strong>Actions</strong>\" that were activated on command. The core of the system is having a base class called \"<strong>Action</strong>\" and have different behaviors derive from this class.\n  </p>\n\n  <p>\n    At the moment an action is executed it will register itself to a static container that handles the execution of the current active actions. The action will then update until it thinks that it doesn't need to update anymore, meaning the action itself decides when it will stop updating.&nbsp;\n  </p>\n\n  <p>\n    The system becomes more useful when implementing different \"<strong>Composite Actions</strong>\", such as \"<strong>ActionSequence</strong>\" and \"<strong>ActionDependency</strong>\", the first mentioned simply updating the actions in order and the latter updating all actions at once until all have finished executing.\n  </p>\n\n  <p>\n    The above problem could then be solved using an \"ActionSequence\" that contains the behaviors in order.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/5/screen-capture-ezgif.com-video-to-gif-converter-2.gif\" height=\"225\" width=\"400\" alt=\"\" >\n      <figcaption>The sequence in action</figcaption>\n    </figure>\n\n    <h3 id=\"unity-tools\">\n      Unity Tools\n    </h3>\n\n  <p>\n    The scripted events in the game was created by level designers as it created a more modular pipeline. The level designers could select different events to happen when the player walked on specified tiles.&nbsp;\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/5/Skaermbild-2024-03-18-171757.png\" height=\"438\" width=\"449\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/5/responsive/Skaermbild-2024-03-18-171757-xs.png 320w ,https://broremilolofsson.github.io/media/posts/5/responsive/Skaermbild-2024-03-18-171757-sm.png 480w ,https://broremilolofsson.github.io/media/posts/5/responsive/Skaermbild-2024-03-18-171757-md.png 768w ,https://broremilolofsson.github.io/media/posts/5/responsive/Skaermbild-2024-03-18-171757-xl.png 1024w\">\n      <figcaption>Level design tool in Unity to create an Arena Event</figcaption>\n    </figure>\n\n  <p>\n    The data was exported to the TGE project to create the corresponding actions.\n  </p>\n\n    <h3 id=\"camera-controller\">\n      Camera Controller\n    </h3>\n\n  <p>\n    The game's levels typically employ a top-down camera following the player. However, the dungeon level features a static camera that transitions between rooms as the player enters each one.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/5/Stellas-Quest-Camera.gif\" height=\"225\" width=\"400\" alt=\"\" >\n      \n    </figure>\n\n  <p>\n    Transitions between the camera modes was also implemented, however not utilized in this game.\n  </p>",
            "image": "https://broremilolofsson.github.io/media/posts/5/StellasQuest.png",
            "author": {
                "name": "Emil Olofsson"
            },
            "tags": [
            ],
            "date_published": "2024-02-21T12:19:16+01:00",
            "date_modified": "2024-04-03T14:55:37+02:00"
        },
        {
            "id": "https://broremilolofsson.github.io/visual-scripting.html",
            "url": "https://broremilolofsson.github.io/visual-scripting.html",
            "title": "Node Scripting",
            "summary": "Summary This page contains an overview of a node scripting system I&hellip;",
            "content_html": "\n    <h3 id=\"summary\">\n      Summary\n    </h3>\n\n  <p>\n    This page contains an overview of a node scripting system I have created. From a level design perspective, the system supports:\n  </p>\n\n  <ul>\n    <li>General behavior scripting (Creating logic visually)</li><li>Custom Events</li><li>Variables</li><li>Command Tracking / Undo + Redo functionality<br></li>\n  </ul>\n\n  <p>\n    From a programmer's perspective, the system supports:\n  </p>\n\n  <ul>\n    <li>Function based nodes</li><li>Custom data type handling</li>\n  </ul>\n\n    <h3 id=\"background\">\n      Background\n    </h3>\n\n  <p>\n    Implementing a modular gameplay system is something that has intrigued me since the start of the <a href=\"https://broremilolofsson.github.io/projects.html\" target=\"_blank\">Stella's Quest</a> project. Since all of my previous systems have been inheritance based, I wanted to try to create something that didn't use classes and virtual functions to enable different behaviors.\n  </p>\n\n    <h3 id=\"programming-interface\">\n      Programming Interface\n    </h3>\n\n  <p>\n    The most important part of creating systems and APIs, in my experience, is the interface to the user. The interface should be simple and effective, both for programmers, when implementing new nodes, and for level designers, when creating the actual game logic visually.\n  </p>\n\n  <p>\n    An intuitive approach to creating nodes involves defining node types through functions. This method allows programmers to easily define functions that have specific behaviors, and then register them to a manager responsible for converting these functions into node types. In this model, the parameters of a function serve as the node's input, while its return values serve as the node's output.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/4/Skaermbild-2024-03-28-122602.png\" height=\"187\" width=\"542\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-03-28-122602-xs.png 320w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-03-28-122602-sm.png 480w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-03-28-122602-md.png 768w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-03-28-122602-xl.png 1024w\">\n      <figcaption>Registering a node to the system</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/4/Skaermbild-2024-03-28-122930.png\" height=\"262\" width=\"372\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-03-28-122930-xs.png 320w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-03-28-122930-sm.png 480w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-03-28-122930-md.png 768w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-03-28-122930-xl.png 1024w\">\n      <figcaption>The generated visual representation of the node</figcaption>\n    </figure>\n\n  <p>\n    Since a function in most languages, C++ included, only allows one return value, the container <a href=\"https://en.cppreference.com/w/cpp/utility/tuple\">std::tuple</a> was utilized to enable functions to return multiple values in a single data structure.\n  </p>\n\n    <h3 id=\"execution\">\n      Execution\n    </h3>\n\n  <p>\n    The execution part of the code uses a type called <strong>Flow </strong>that acts as the control flow of the program. We can check in compile time if a node has a Flow output, and if that's the case we trigger the connected node to the flow pin.\n  </p>\n\n  <p>\n    When executing a node, the program does the following:\n  </p>\n\n  <ol>\n    <li>Retrieves the input data of the node</li><li>Calls the function and retrieves its output data</li><li>Set the output data of the node</li>\n  </ol>\n\n    <h3 id=\"memory-management\">\n      Memory Management\n    </h3>\n\n  <p>\n    As we need to be able to allocate essentially any data type in our system, we need to use a data structure that supports this flexibility. The <strong>Memory Pool</strong> enables us to store various data types in contiguous memory. In essence, it is implemented as a vector but without the type safety.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/4/Skaermbild-2024-04-02-091513.png\" height=\"301\" width=\"513\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-091513-xs.png 320w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-091513-sm.png 480w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-091513-md.png 768w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-091513-xl.png 1024w\">\n      <figcaption>Example usage of a memory pool</figcaption>\n    </figure>\n\n  <p>\n    In the above image, we allocate different types to the memory pool. When allocating a variable to the memory pool, the user receives an ID they can use to access the data. This is opposed to receiving a pointer to the data as we need the memory pool to be relocatable and if we have a pointer to the data, the pointer will have a chance of going out of scope if the memory pool reallocates.\n  </p>\n\n  <p>\n    The memory pool realizes when it is out of memory and reallocates its memory internally, while simultaneously increasing it's size, just like a vector.\n  </p>\n\n  <p>\n    When creating a node, the input/output pins allocate memory in the memory pool and keep the ID stored for usage when the needing to access the data when the node is executed.\n  </p>\n\n    <h3 id=\"type-erasure\">\n      Type Erasure\n    </h3>\n\n  <p>\n    As the execution part is all templated and set at compile time, the program knows how to handle the data types that the node functions use. The problem is when we want to visualize, save and load different data types; How can the user register custom data types that the system handles polymorphically?\n  </p>\n\n  <p>\n    To be able to handle various data types, including custom data types that the user wants, I used a technique called type erasure. The system is essentially type agnostic, meaning it doesn't know or care about the types that it uses.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/4/Skaermbild-2024-04-02-102040.png\" height=\"242\" width=\"447\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-102040-xs.png 320w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-102040-sm.png 480w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-102040-md.png 768w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-102040-xl.png 1024w\">\n      <figcaption>Overloaded functions for the \"int\" type</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/4/Skaermbild-2024-04-02-105308.png\" height=\"92\" width=\"509\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-105308-xs.png 320w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-105308-sm.png 480w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-105308-md.png 768w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-105308-xl.png 1024w\">\n      <figcaption>Registering of the type \"int\"</figcaption>\n    </figure>\n\n  <p>\n    For example, when implementing a custom data type, the type needs the overloaded functions \"Edit\", \"Save\" and \"Load\". When registering the type, the system itself figures out which overloaded function to call in compile time.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/4/Skaermbild-2024-04-02-112540.png\" height=\"184\" width=\"436\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-112540-xs.png 320w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-112540-sm.png 480w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-112540-md.png 768w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-112540-xl.png 1024w\">\n      <figcaption>Type erasure of the edit functionality</figcaption>\n    </figure>\n\n  <p>\n    When registering a type, we can create a type erased interface that allows us to perform functionality on data without knowing which type they are. As seen in the above image, the function pointer that is returned from the function is completely type erased, meaning when using it, we don't know which type we are editing. The function signature is type erased while the implementation is not, this is the key to type erasure.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/4/Skaermbild-2024-04-02-113450.png\" height=\"146\" width=\"338\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-113450-xs.png 320w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-113450-sm.png 480w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-113450-md.png 768w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-113450-xl.png 1024w\">\n      <figcaption>Type erased interface that is generated for every registered type</figcaption>\n    </figure>\n\n  <p>\n    When calling the edit function for a type, you still need some type of identifier to know which type we are dealing with. The thing that the data is bound to, for example a <strong>pin</strong>, can store a <strong>DataTypeID </strong>to remember the underlying data type.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/4/Skaermbild-2024-04-02-120505.png\" height=\"189\" width=\"519\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-120505-xs.png 320w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-120505-sm.png 480w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-120505-md.png 768w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-120505-xl.png 1024w\">\n      <figcaption>The function that is called from the editor when wanting to edit/visualize a pin's data</figcaption>\n    </figure>\n\n  <p>\n    When we have the <strong>DataTypeID </strong>and the pointer to the data, we can call the edit function of our type. The <strong>DataTypeManager </strong>has a map with the <strong>DataTypeID </strong>as the key and the type erased object as the value. This way we can select the correct function to call.\n  </p>\n\n  <p>\n    One thing to note is that the <strong>DataTypeID </strong>of a type has to be unique for that type. If we have a hash collision, the system will assert.\n  </p>\n\n    <h3 id=\"custom-event-nodes\">\n      Custom Event Nodes\n    </h3>\n\n  <p>\n    Type erasure not only allows us to have polymorphic behavior with types, it enables runtime generation of nodes with customized pins.\n  </p>\n\n  <p>\n    Custom event nodes, inspired by <a href=\"https://docs.unrealengine.com/4.27/en-US/ProgrammingAndScripting/Blueprints/UserGuide/Events/Custom/\">those found in Unreal Engine</a>, are implemented in my system.&nbsp;The user can call the event at any time in the graph using a \"caller node\" and the functionality attached to the \"executor node\" will be executed.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/4/Skaermbild-2024-04-02-144358.png\" height=\"188\" width=\"482\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-144358-xs.png 320w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-144358-sm.png 480w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-144358-md.png 768w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-144358-xl.png 1024w\">\n      <figcaption>The editor view of creating custom event nodes</figcaption>\n    </figure>\n\n  <p>\n    In the editor, the user can create custom event nodes with attached data types. This allows output of the custom event to be flexible depending on who the caller is.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/4/Skaermbild-2024-04-02-144404.png\" height=\"339\" width=\"331\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-144404-xs.png 320w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-144404-sm.png 480w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-144404-md.png 768w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-144404-xl.png 1024w\">\n      <figcaption>The \"caller\" and the \"executor\" nodes of a custom event</figcaption>\n    </figure>\n\n    <h3 id=\"variables\">\n      Variables\n    </h3>\n\n  <p>\n    Similar to Unreal Engine, the system also accommodates <a href=\"https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/Blueprints/UserGuide/Variables/\">variables</a>. This allows users to store and manipulate variables using getter and setter nodes. This functionality creates dynamic scripting capabilities, enabling runtime modifications to the inputs used during execution.<br>\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/4/Skaermbild-2024-04-02-151057.png\" height=\"159\" width=\"512\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-151057-xs.png 320w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-151057-sm.png 480w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-151057-md.png 768w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-151057-xl.png 1024w\">\n      <figcaption>Editor view of creating a variable with the type \"SceneData\"</figcaption>\n    </figure>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://broremilolofsson.github.io/media/posts/4/Skaermbild-2024-04-02-151026.png\" height=\"242\" width=\"311\" alt=\"\"  sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-151026-xs.png 320w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-151026-sm.png 480w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-151026-md.png 768w ,https://broremilolofsson.github.io/media/posts/4/responsive/Skaermbild-2024-04-02-151026-xl.png 1024w\">\n      <figcaption>Setter and getter for the variable \"MySceneData\"</figcaption>\n    </figure>\n\n    <h3 id=\"improvements\">\n      Improvements\n    </h3>\n\n  <p>\n    The are a lot of things that can be improved with the system. This includes:\n  </p>\n\n  <ul>\n    <li>Allowing references as inputs to the node functions</li><li>Enabling default values as inputs</li><li>A lot of needed functionality for editor purposes, such as copying of nodes.</li>\n  </ul>",
            "image": "https://broremilolofsson.github.io/media/posts/4/CreatingNodes5.gif",
            "author": {
                "name": "Emil Olofsson"
            },
            "tags": [
            ],
            "date_published": "2024-02-21T12:17:48+01:00",
            "date_modified": "2024-04-09T14:29:33+02:00"
        }
    ]
}
